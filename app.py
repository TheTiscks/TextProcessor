from flask import Flask, request, jsonify
from datetime import datetime, timedelta
import secrets

app = Flask(__name__)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π
messages_db = {}

HTML = '''
<!DOCTYPE html>
<html>
<head>
    <title>AES Cryptor</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
    <style>
        /* ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∏–ª–∏ ... */
        .lifetime-selector { margin: 10px 0; }
        .link-result { margin-top: 10px; word-break: break-all; }
    </style>
</head>
<body>
    <div class="container">
        <h2>AES Encryptor/Decryptor</h2>
        <div class="switch">
            <button onclick="setMode('encrypt')" id="encryptBtn">–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ</button>
            <button onclick="setMode('decrypt')" id="decryptBtn">–î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞</button>
        </div>

        <textarea id="text" rows="5" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç..."></textarea>
        <input type="password" id="key" placeholder="–ö–ª—é—á (–ª—é–±–∞—è –¥–ª–∏–Ω–∞)">

        <div class="lifetime-selector" id="lifetimeSection" style="display: none;">
            <label>–í—Ä–µ–º—è –∂–∏–∑–Ω–∏:</label>
            <select id="lifetime">
                <option value="hour">1 —á–∞—Å</option>
                <option value="day">1 –¥–µ–Ω—å</option>
                <option value="week">1 –Ω–µ–¥–µ–ª—è</option>
            </select>
        </div>

        <button onclick="process()" id="actionBtn">–®–∏—Ñ—Ä–æ–≤–∞—Ç—å</button>
        <button onclick="createSecretLink()" id="linkBtn">–°–æ–∑–¥–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Å—Å—ã–ª–∫—É</button>

        <div id="result"></div>
        <div id="linkResult" class="link-result"></div>
    </div>

    <script>
        let currentMode = 'encrypt';

        function setMode(mode) {
            currentMode = mode;
            const btn = document.getElementById('actionBtn');
            btn.textContent = mode === 'encrypt' ? '–®–∏—Ñ—Ä–æ–≤–∞—Ç—å' : '–î–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å';
            document.querySelectorAll('.switch button').forEach(b => 
                b.style.background = b.id === mode + 'Btn' ? '#45a049' : '#4CAF50');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            document.getElementById('lifetimeSection').style.display = 
                mode === 'encrypt' ? 'block' : 'none';
        }

        async function createSecretLink() {
            const text = document.getElementById('text').value;
            const key = document.getElementById('key').value;
            const lifetime = document.getElementById('lifetime').value;

            if (!text || !key) {
                showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –∫–ª—é—á!');
                return;
            }

            try {
                // –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                const encrypted = CryptoJS.AES.encrypt(text, key).toString();

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                const response = await fetch('/create', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({
                        encrypted_msg: encrypted,
                        lifetime: lifetime
                    })
                });

                const data = await response.json();
                if (data.url) {
                    document.getElementById('linkResult').innerHTML = 
                        `<strong>–°—Å—ã–ª–∫–∞:</strong><br><a href="${data.url}">${data.url}</a>`;
                }
            } catch (e) {
                showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: ' + e.message);
            }
        }

        /* ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ process() –∏ showError() ... */
    </script>
</body>
</html>
'''


@app.route('/create', methods=['POST'])
def create_message():
    data = request.json
    msg_id = secrets.token_urlsafe(16)

    # –†–∞—Å—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏
    lifetimes = {
        'hour': timedelta(hours=1),
        'day': timedelta(days=1),
        'week': timedelta(weeks=1)
    }

    messages_db[msg_id] = {
        'encrypted': data['encrypted_msg'],
        'expires': datetime.now() + lifetimes[data['lifetime']],
        'views_left': 1
    }

    return jsonify({'url': f'/m/{msg_id}'})


@app.route('/m/<msg_id>')
def view_message(msg_id):
    entry = messages_db.get(msg_id)

    if not entry or datetime.now() > entry['expires']:
        if msg_id in messages_db: del messages_db[msg_id]
        return '''
            <h3>–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ</h3>
            <p>–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ</p>
        '''

    return f'''
        <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
        <div style="max-width: 600px; margin: 50px auto; padding: 20px;">
            <h3>–°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üîí</h3>
            <div id="content" style="margin: 20px 0; padding: 15px; border: 1px solid #ddd;"></div>
            <script>
                const encrypted = "{entry['encrypted']}";
                const key = prompt('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:');

                try {{
                    const bytes = CryptoJS.AES.decrypt(encrypted, key);
                    const text = bytes.toString(CryptoJS.enc.Utf8);
                    if (!text) throw new Error();

                    document.getElementById('content').innerHTML = text;
                    fetch('/consume/{msg_id}');
                }} catch (e) {{
                    document.getElementById('content').innerHTML = 
                        '<p style="color: red">–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ</p>';
                }}
            </script>
        </div>
    '''


@app.route('/consume/<msg_id>')
def consume_message(msg_id):
    if msg_id in messages_db:
        messages_db[msg_id]['views_left'] -= 1
        if messages_db[msg_id]['views_left'] <= 0:
            del messages_db[msg_id]
    return '', 200


@app.route('/')
def home():
    return HTML


if __name__ == '__main__':
    app.run(debug=True)